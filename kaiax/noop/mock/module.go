// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kaiachain/kaia/kaiax/noop (interfaces: NoopModule)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	state "github.com/kaiachain/kaia/blockchain/state"
	types "github.com/kaiachain/kaia/blockchain/types"
	vm "github.com/kaiachain/kaia/blockchain/vm"
	common "github.com/kaiachain/kaia/common"
	rpc "github.com/kaiachain/kaia/networks/rpc"
)

// MockNoopModule is a mock of NoopModule interface.
type MockNoopModule struct {
	ctrl     *gomock.Controller
	recorder *MockNoopModuleMockRecorder
}

// MockNoopModuleMockRecorder is the mock recorder for MockNoopModule.
type MockNoopModuleMockRecorder struct {
	mock *MockNoopModule
}

// NewMockNoopModule creates a new mock instance.
func NewMockNoopModule(ctrl *gomock.Controller) *MockNoopModule {
	mock := &MockNoopModule{ctrl: ctrl}
	mock.recorder = &MockNoopModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNoopModule) EXPECT() *MockNoopModuleMockRecorder {
	return m.recorder
}

// APIs mocks base method.
func (m *MockNoopModule) APIs() []rpc.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIs")
	ret0, _ := ret[0].([]rpc.API)
	return ret0
}

// APIs indicates an expected call of APIs.
func (mr *MockNoopModuleMockRecorder) APIs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIs", reflect.TypeOf((*MockNoopModule)(nil).APIs))
}

// FinalizeHeader mocks base method.
func (m *MockNoopModule) FinalizeHeader(arg0 *types.Header, arg1 *state.StateDB, arg2 []*types.Transaction, arg3 []*types.Receipt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeHeader", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeHeader indicates an expected call of FinalizeHeader.
func (mr *MockNoopModuleMockRecorder) FinalizeHeader(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeHeader", reflect.TypeOf((*MockNoopModule)(nil).FinalizeHeader), arg0, arg1, arg2, arg3)
}

// PostInsertBlock mocks base method.
func (m *MockNoopModule) PostInsertBlock(arg0 *types.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostInsertBlock", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostInsertBlock indicates an expected call of PostInsertBlock.
func (mr *MockNoopModuleMockRecorder) PostInsertBlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostInsertBlock", reflect.TypeOf((*MockNoopModule)(nil).PostInsertBlock), arg0)
}

// PostRunTx mocks base method.
func (m *MockNoopModule) PostRunTx(arg0 *vm.EVM, arg1 *types.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostRunTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostRunTx indicates an expected call of PostRunTx.
func (mr *MockNoopModuleMockRecorder) PostRunTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostRunTx", reflect.TypeOf((*MockNoopModule)(nil).PostRunTx), arg0, arg1)
}

// PreRunTx mocks base method.
func (m *MockNoopModule) PreRunTx(arg0 *vm.EVM, arg1 *types.Transaction) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreRunTx", arg0, arg1)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PreRunTx indicates an expected call of PreRunTx.
func (mr *MockNoopModuleMockRecorder) PreRunTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreRunTx", reflect.TypeOf((*MockNoopModule)(nil).PreRunTx), arg0, arg1)
}

// PrepareHeader mocks base method.
func (m *MockNoopModule) PrepareHeader(arg0 *types.Header) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrepareHeader indicates an expected call of PrepareHeader.
func (mr *MockNoopModuleMockRecorder) PrepareHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareHeader", reflect.TypeOf((*MockNoopModule)(nil).PrepareHeader), arg0)
}

// RewindDelete mocks base method.
func (m *MockNoopModule) RewindDelete(arg0 common.Hash, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RewindDelete", arg0, arg1)
}

// RewindDelete indicates an expected call of RewindDelete.
func (mr *MockNoopModuleMockRecorder) RewindDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RewindDelete", reflect.TypeOf((*MockNoopModule)(nil).RewindDelete), arg0, arg1)
}

// RewindTo mocks base method.
func (m *MockNoopModule) RewindTo(arg0 *types.Block) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RewindTo", arg0)
}

// RewindTo indicates an expected call of RewindTo.
func (mr *MockNoopModuleMockRecorder) RewindTo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RewindTo", reflect.TypeOf((*MockNoopModule)(nil).RewindTo), arg0)
}

// Start mocks base method.
func (m *MockNoopModule) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockNoopModuleMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockNoopModule)(nil).Start))
}

// Stop mocks base method.
func (m *MockNoopModule) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockNoopModuleMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockNoopModule)(nil).Stop))
}

// VerifyHeader mocks base method.
func (m *MockNoopModule) VerifyHeader(arg0 *types.Header) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyHeader indicates an expected call of VerifyHeader.
func (mr *MockNoopModuleMockRecorder) VerifyHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyHeader", reflect.TypeOf((*MockNoopModule)(nil).VerifyHeader), arg0)
}
